{"version":3,"sources":["ng-progress-button-styles.js"],"names":["angular","whichTransitionEnd","element","transitions","WebkitTransition","MozTransition","OTransition","transition","t","style","undefined","ProgressButtonConfig","profiles","defaultProfile","defaultProgressButtonConfig","direction","randomProgress","this","profile","profileName","options","arguments","length","Error","$get","getProfile","ProgressButton","$q","ngProgressButtonConfig","$interval","restrict","transclude","scope","pbStyle","pbDirection","pbProfile","ngProgressButton","template","controller","link","$scope","$element","$attrs","_configure","pbPerspective","indexOf","pbRandomProgress","transitionEndEventName","progressProperty","setProgress","val","progressStyles","runProgressInterval","progress","Math","random","enable","$apply","disabled","doStop","status","onOpacityTransitionEnd","ev","propertyName","originalEvent","off","allowProgressTransition","opacity","on","statusClass","addClass","setTimeout","removeClass","wrap","append","children","$watch","newValue","toggleClass","oldValue","interval","when","then","success","cancel","error","notify","arg","mdl","module","provider","directive","$inject"],"mappings":"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","file":"ng-progress-button-styles.js","sourcesContent":["(function(angular) {\n    'use strict';\n\n    function whichTransitionEnd(element) {\n        var transitions = {\n            'WebkitTransition' : 'webkitTransitionEnd',\n            'MozTransition'    : 'transitionend',\n            'OTransition'      : 'oTransitionEnd otransitionend',\n            'transition'       : 'transitionend'\n        };\n\n        for(var t in transitions){\n            if(element.style[t] !== undefined){\n                return transitions[t];\n            }\n        }\n    }\n\n\n    function ProgressButtonConfig() {\n\n        var profiles = {};\n        var defaultProfile = null;\n        var defaultProgressButtonConfig = {\n            style: 'fill',\n            direction: 'horizontal',\n            randomProgress: true\n        };\n\n        this.profile = function(profileName, options) {\n            if (arguments.length === 1) { // Means default configuration\n                if (defaultProfile) {\n                    throw Error('Default profile already set.');\n                }\n                defaultProfile = profileName;\n            } else {\n                if (profiles[profileName]) {\n                    throw Error('Profile [' + profileName + '] aready set.');\n                }\n                profiles[profileName] = options;\n            }\n        };\n\n        this.$get = function() {\n            return {\n                getProfile: function(profileName) {\n                    if (profileName && profiles[profileName]) {\n                        return profiles[profileName];\n                    } else {\n                        return defaultProfile || defaultProgressButtonConfig;\n                    }\n                }\n            };\n        };\n    }\n\n    function ProgressButton($q, ngProgressButtonConfig, $interval) {\n        return {\n            restrict: 'A',\n            transclude: true,\n            scope: {\n                pbStyle: '@',\n                pbDirection: '@',\n                pbProfile: '@',\n                ngProgressButton: '='\n            },\n            template: '<span class=\"content\" ng-transclude></span>' +\n            '<span class=\"progress\">' +\n            '<span class=\"progress-inner\" ng-style=\"progressStyles\" ng-class=\"{ notransition: !allowProgressTransition }\"></span>' +\n            '</span>',\n            controller: function() {},\n            link: function($scope, $element, $attrs) {\n\n                function _configure() {\n                    var profile = ngProgressButtonConfig.getProfile($scope.pbProfile);\n\n                    $scope.pbStyle = $scope.pbStyle || profile.style || 'fill';\n                    if ($scope.pbStyle !== 'lateral-lines') {\n                        $scope.pbDirection = $scope.pbDirection || profile.direction || 'horizontal';\n                    } else {\n                        $scope.pbDirection = 'vertical';\n                    }\n\n                    $scope.pbPerspective = $scope.pbStyle.indexOf('rotate') === 0 || $scope.pbStyle.indexOf('flip-open') === 0;\n                    $scope.pbRandomProgress = $attrs.pbRandomProgress ? $attrs.pbRandomProgress !== 'false' : (profile.randomProgress || true);\n                }\n\n                _configure();\n                var transitionEndEventName = whichTransitionEnd($element[0]);\n                var progressProperty = $scope.pbDirection === 'vertical' ? 'height' : 'width';\n\n\n                function setProgress(val) {\n                    $scope.progressStyles[progressProperty] = 100 * val + '%';\n                }\n\n                function runProgressInterval() {\n                    var progress = 0;\n                    return $interval(function() {\n                        progress += (1 - progress) * Math.random() * 0.5;\n                        setProgress(progress);\n                    }, 200);\n                }\n\n                function enable() {\n                    $scope.$apply(function() {\n                        $scope.disabled = false;\n                    });\n                }\n\n                function doStop(status) {\n\n                    function onOpacityTransitionEnd(ev) {\n                        // JQuery event may no have propertyName, but the originalEvent does\n                        if (ev.propertyName !== 'opacity' && (! ev.originalEvent || ev.originalEvent.propertyName !== 'opacity') ) {\n                            return;\n                        }\n\n                        $element.off(transitionEndEventName, onOpacityTransitionEnd);\n                        $scope.$apply(function() {\n                            $scope.allowProgressTransition = false;\n                            setProgress(0);\n                            $scope.progressStyles.opacity = 1;\n                        });\n                    }\n\n                    if (transitionEndEventName) {\n                        $scope.progressStyles.opacity = 0;\n                        $element.on(transitionEndEventName, onOpacityTransitionEnd);\n                    }\n\n                    if (typeof status === 'number') {\n                        var statusClass = status >= 0 ? 'state-success' : 'state-error';\n                        $element.addClass(statusClass);\n                        setTimeout(function() {\n                            $element.removeClass(statusClass);\n                            enable();\n                        }, 1500); // TODO: fetch it from the options\n                    }\n                    else {\n                        enable();\n                    }\n                    $element.removeClass('state-loading');\n                }\n\n\n                if ($scope.pbPerspective) {\n                    var wrap = angular.element('<span class=\"progress-wrap\"></span>');\n                    wrap.append($element.children());\n                    $element.append(wrap);\n                    $element.addClass('progress-button-perspective');\n                }\n                $scope.progressStyles = {};\n                $scope.disabled = false;\n                $scope.allowProgressTransition = false;\n                // TODO: fetch from attributes probably\n\n                $element.addClass('progress-button');\n                $element.addClass('progress-button-dir-' + $scope.pbDirection);\n                $element.addClass('progress-button-style-' + $scope.pbStyle);\n\n                $scope.$watch('disabled', function(newValue) {\n                    $element.toggleClass('disabled', newValue);\n                });\n\n\n                $scope.$watch('ngProgressButton', function(newValue, oldValue) {\n\n                    if ( newValue !== oldValue ) {\n\n                        if ($scope.disabled) {\n                            return;\n                        }\n                        $scope.disabled = true;\n                        $element.addClass('state-loading');\n                        $scope.allowProgressTransition = true;\n                        var interval = null;\n\n                        $q.when(newValue).then(\n                            function success() {\n                                setProgress(1);\n                                if (interval) {\n                                    $interval.cancel(interval);\n                                }\n                                doStop(1);\n                            },\n                            function error() {\n                                if (interval) {\n                                    $interval.cancel(interval);\n                                }\n                                doStop(-1);\n                            },\n                            function notify(arg) {\n                                if (!$scope.pbRandomProgress) {\n                                    setProgress(arg);\n                                }\n                            }\n                        );\n\n                        if ($scope.pbRandomProgress) {\n                            interval = runProgressInterval();\n                        }\n                    }\n                });\n\n            }\n        };\n    }\n\n    var mdl = angular.module('ngProgressButtonStyles', []);\n\n    mdl.provider('ngProgressButtonConfig', ProgressButtonConfig);\n\n    mdl.directive('ngProgressButton', ProgressButton);\n\n    ProgressButton.$inject = ['$q', 'ngProgressButtonConfig', '$interval'];\n\n})(angular);\n"],"sourceRoot":"dist"}